// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id        String    @id @default(cuid())
  slug      String    @unique
  name      String
  parentId  String?
  parent    Category? @relation("CategoryToSub", fields: [parentId], references: [id])
  children  Category[] @relation("CategoryToSub")
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id          String        @id @default(cuid())
  slug        String        @unique
  title       String
  description String
  price       Int           // stored in cents
  brand       String
  images      Json
  categoryId  String
  category    Category      @relation(fields: [categoryId], references: [id])
  variants    ProductVariant[]
  favorites   Favorite[]
  orderItems  OrderItem[]
  reviews     Review[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model ProductVariant {
  id         String  @id @default(cuid())
  productId  String
  product    Product @relation(fields: [productId], references: [id])
  name       String  // e.g., Renk: Siyah, Kapasite: 256GB
  sku        String  @unique
  stock      Int     @default(0)
  priceDelta Int     @default(0)
}

model Review {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  rating    Int
  content   String
  author    String
  createdAt DateTime @default(now())
}

model BlogPost {
  id        String   @id @default(cuid())
  slug      String   @unique
  title     String
  excerpt   String
  content   String
  cover     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Auth models for NextAuth (Prisma Adapter)
model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String   @default("customer") // customer, admin, superadmin
  companyName   String?  // B2B: Company name
  taxNumber     String?  // B2B: Tax/VAT number
  phone         String?  // B2B: Company phone
  companyAddress String? // B2B: Company address
  accounts      Account[]
  sessions      Session[]
  addresses     Address[]
  favorites     Favorite[]
  orders        Order[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Address {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  fullName  String
  phone     String?
  city      String?
  district  String?
  line      String
  type      String   // shipping | billing
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Order {
  id             String      @id @default(cuid())
  userId         String
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  status         String
  total          Int
  createdAt      DateTime    @default(now())
  items          OrderItem[]
  trackingNumber String?
  carrier        String?
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])
  qty       Int     @default(1)
  price     Int
}
