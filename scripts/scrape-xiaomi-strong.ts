import { writeFile } from "node:fs/promises";
import { setTimeout as delay } from "node:timers/promises";
import * as cheerio from "cheerio";
import { fetch } from "undici";

type Product = { id: string; title: string; brand?: string; price?: number; image?: string; url?: string; description?: string };
type CategoryDump = { category: string; url: string; items: Product[] };

const START_URL = "https://euromobilecompany.de/de/parts/xiaomi";
const ORIGIN = new URL(START_URL).origin;

function toAbsoluteUrl(href: string): string {
  try { if (!href) return ""; if (href.startsWith("http")) return href; if (href.startsWith("/")) return ORIGIN + href; return new URL(href, START_URL).toString(); } catch { return ""; }
}
function normalizeCategoryUrl(u: string): string { try { if (!u) return ""; const abs=toAbsoluteUrl(u); if (!abs) return ""; const url=new URL(abs); url.search=""; url.hash=""; let path=url.pathname.replace(/\/+$/,""); if (!/\/de\/parts\/xiaomi(\/|$)/i.test(path)) return ""; url.pathname=path; return url.toString(); } catch { return ""; } }
async function getDocument(url: string){ const res=await fetch(url,{headers:{"user-agent":"Mozilla/5.0 scrape-bot"}}); if(!res.ok) throw new Error(`HTTP ${res.status} for ${url}`); const html=await res.text(); const $=cheerio.load(html); return { $, html }; }
function extractText($el: cheerio.Cheerio<any>): string { return ($el.text()||"").replace(/\s+/g," ").trim(); }
function parsePriceToKurus(t?: string){ if(!t) return undefined; const c=t.replace(/[^0-9,\.]/g,"").replace(/\./g,"").replace(",","."); if(!c) return undefined; const n=Number(c); return Number.isFinite(n)?Math.round(n*100):undefined; }
function firstAttr($el: cheerio.Cheerio<any>, attrs: string[]){ for(const a of attrs){ const v=$el.attr(a); if(v) return v; } return undefined; }
function cleanImageUrl(src?: string){ if(!src) return undefined; const s=src.split(" ")[0]; if(!s) return undefined; if (s.toLowerCase().includes("favicon")) return undefined; return s; }
function extractCategoryTitle($: cheerio.CheerioAPI, fallback: string){ const cand=["h1",".page-title",".category-title",".breadcrumb + h1"]; for(const sel of cand){ const t=extractText($(sel).first()); if(t) return t; } try{ const {pathname}=new URL(fallback); const last=pathname.split("/").filter(Boolean).pop()||"Kategori"; return decodeURIComponent(last.replace(/[-_]/g," ")).trim(); } catch { return "Kategori"; } }

async function scrapeProductsFromList(url: string){ const { $ }=await getDocument(url); const sels=[".product-item",".product-grid .product",".products .product","li.product",".product-miniature",".product-list .item",".product-layout",".product-thumb"]; let items: Product[]=[]; let found=false; for(const sel of sels){ const nodes=$(sel); if(nodes.length===0) continue; found=true; nodes.each((_,el)=>{ const $el=$(el); const link=$el.find("a[href]").first(); const href=toAbsoluteUrl(link.attr("href")||""); const id=href||extractText($el.find(".sku,[itemprop=sku]").first())||`${url}#${items.length}`; const title=extractText($el.find(".product-title,.name,h2,h3,.caption h4 a").first())||extractText(link); const brand=extractText($el.find(".brand,.manufacturer,[itemprop=brand],.caption .manufacturer a").first()); const price=parsePriceToKurus(extractText($el.find(".price,.product-price,[itemprop=price],.price-new,.caption .price").first())); const img=firstAttr($el.find("img").first(),["data-src","data-lazy","data-original","srcset","src"]); const image=cleanImageUrl(img); if(title) items.push({id,title,brand:brand||undefined,price,image,url:href}); }); if(items.length>0) break; }
  if(items.length===0){ $("script[type='application/ld+json']").each((_,el)=>{ try{ const txt=$(el).contents().text(); if(!txt) return; const data=JSON.parse(txt); const nodes:any[]=Array.isArray(data)?data:[data]; for(const node of nodes){ if(node && (node["@type"]==="Product" || (Array.isArray(node["@type"]) && node["@type"].includes("Product")))){ const title=node.name||node["@name"]; const image=cleanImageUrl(Array.isArray(node.image)?node.image[0]:node.image)||undefined; const offers=node.offers||{}; const price=parsePriceToKurus(String(offers.price ?? offers["@price"] ?? node.price)); const brand=(typeof node.brand==="string"?node.brand:node.brand?.name)||undefined; const id=node.sku||node["@id"]||node.url||`${url}#${items.length}`; const href=toAbsoluteUrl(node.url||""); if(title) items.push({id,title,brand,price,image,url:href}); }
          if(node && (node["@type"]==="ItemList" || node.itemListElement)){ const els=node.itemListElement||[]; for(const it of els){ const item=it.item||it; if(!item) continue; const title=item.name||item["@name"]; const image=cleanImageUrl(Array.isArray(item.image)?item.image[0]:item.image)||undefined; const offers=item.offers||{}; const price=parsePriceToKurus(String(offers.price ?? item.price)); const brand=(typeof item.brand==="string"?item.brand:item.brand?.name)||undefined; const id=item.sku||item["@id"]||item.url||`${url}#${items.length}`; const href=toAbsoluteUrl(item.url||""); if(title) items.push({id,title,brand,price,image,url:href}); } }
        } } catch{} }); }
  let nextUrl: string|undefined; const next=$("a[rel=next], .pagination a.next, a.page-link[aria-label=Next]").first(); const n=next.attr("href"); if(n) nextUrl=toAbsoluteUrl(n); if(!nextUrl){ $("a[href]").each((_,a)=>{ const h=$(a).attr("href")||""; if(/page=\d+/i.test(h)) nextUrl=toAbsoluteUrl(h); }); }
  if(!found) items=[]; return { items, nextUrl };
}

async function scrapeSingleProductFromDetail(url: string){ try{ const { $ }=await getDocument(url); let found: Product|undefined; const pickImg=()=>{ const sels=["#image img",".product-gallery img",".thumbnails img","a.thumbnail img","img[itemprop=image]","img[src*='/image/']"]; for(const s of sels){ const el=$(s).first(); if(el && el.length){ const src=cleanImageUrl(firstAttr(el,["data-src","data-zoom-image","data-large","srcset","src"]))||undefined; if(src) return toAbsoluteUrl(src); } } return undefined; }; const pickTitle=()=>extractText($("h1,.product-title,.page-title").first()); const pickBrand=()=>extractText($(".brand,.manufacturer a,[itemprop=brand]").first()); const pickPrice=()=>parsePriceToKurus(extractText($(".price,.price-new,[itemprop=price]").first())); const pickDesc=()=>{ const el=$("#tab-description,#description,.product-description,[itemprop=description]").first(); const t=extractText(el); if(t && t.length>10) return t; const meta=$("meta[name='description']").attr("content"); return meta?meta.trim():undefined; };
  $("script[type='application/ld+json']").each((_,el)=>{ if(found) return; try{ const txt=$(el).contents().text(); if(!txt) return; const data=JSON.parse(txt); const nodes:any[]=Array.isArray(data)?data:[data]; for(const node of nodes){ if(node && (node["@type"]==="Product" || (Array.isArray(node["@type"]) && node["@type"].includes("Product")))){ const title=node.name||node["@name"]; const image=(Array.isArray(node.image)?node.image[0]:node.image)||pickImg(); const offers=node.offers||{}; const price=parsePriceToKurus(String(offers.price ?? node.price)); const brand=(typeof node.brand==="string"?node.brand:node.brand?.name)||undefined; const id=node.sku||node["@id"]||node.url||url; const href=toAbsoluteUrl(node.url||url); const description=typeof node.description==="string"?node.description:pickDesc(); if(title){ found={id,title,brand,price,image:image?toAbsoluteUrl(image):undefined,url:href,description}; break; } } } } catch{} }); if(found) return found;
  const title=pickTitle(); const image=pickImg(); const brand=pickBrand()||undefined; const price=pickPrice(); const description=pickDesc(); if(title) return { id:url, title, brand, price, image, url, description }; return undefined; } catch { return undefined; } }

async function scrapeCategory(url: string){ const title=extractCategoryTitle((await getDocument(url)).$,url); const all: Product[]=[]; let pageUrl: string|undefined=url; let page=0; const MAX=120; while(pageUrl && page<MAX){ const {items,nextUrl}=await scrapeProductsFromList(pageUrl); if(items.length===0){ const single=await scrapeSingleProductFromDetail(pageUrl); if(single && !all.find(x=>x.id===single.id)) all.push(single); } else { for(const it of items){ const valid=it.url && /\/de\/parts\/xiaomi\//i.test(it.url); if(!all.find(x=>x.id===it.id) && valid) all.push(it); } } pageUrl=nextUrl && nextUrl!==pageUrl? nextUrl: undefined; page++; await delay(200); } return { category:title, url, items: all }; }

function extractSubcategoryLinks($: cheerio.CheerioAPI){ const s=new Set<string>(); $("a[href]").each((_,a)=>{ const href=$(a).attr("href")||""; if(!href) return; if(/\/de\/parts\/xiaomi\//i.test(href)){ const url=normalizeCategoryUrl(href); if(url && url.startsWith(ORIGIN)) s.add(url); } }); return Array.from(s); }

async function main(){ console.log("Scraping start:", START_URL); const visited=new Set<string>(); const queue:string[]=[normalizeCategoryUrl(START_URL)]; const results: CategoryDump[]=[]; while(queue.length){ const link=queue.shift()!; if(!link || visited.has(link)) continue; visited.add(link); try{ console.log("- Category:", link); const { $ }=await getDocument(link); const found=extractSubcategoryLinks($); for(const f of found){ if(f && !visited.has(f) && !queue.includes(f)) queue.push(f); } const cat=await scrapeCategory(link); results.push(cat); } catch(e){ console.warn("Failed category:", link, e); } await delay(250); }
  const outPath="public/data/xiaomi-import.json"; await writeFile(outPath, JSON.stringify(results,null,2),"utf8"); const total=results.reduce((s,c)=>s+(c.items?.length||0),0); console.log(`Saved ${results.length} categories, ${total} products -> ${outPath}`); }

main().catch(e=>{ console.error(e); process.exit(1); });
